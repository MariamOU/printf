#ifndef MAIN_H
#define MAIN_H

void print_charac(char c);
void print_string(const char *str);
int _printf(const char *format, ...);
#include <stdio.h>
#include <stdarg.h>
#include<stdlib.h>
#include<unistd.h>
#include<limits.h>

#define OUTPUT_BUF_SIZE 1024
#define BUF_FLUSH -1


#define CONVERT_LOWERCASE 1
#define CONVERT_UNSIGNED 2


#define NULL_STRING "(null)"
#define PARAMS_INIT {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}


typedef struct parameters
{
  unsigned int unsign;
  unsigned int plus_flag;
  unsigned int minus_flag;
  unsigned int precision;
  unsigned int width;
  unsigned int l_modifier;
  unsigned int h_modifier;
} params_t;
typedef struct specifier
{
  char *specifier;
  int (*f)(va_list, params_t *);
} specifier_t;



int print_int(va_list args, params_t *params);
int print_char(va_list args, params_t *params);
int _printf(const char *format, ...);
int print_string(va_list args, params_t *params);
int print_percent(va_list args, params_t *params);
int print_S(va_list args, params_t *params);


int print_unsigned(va_list args, params_t *params);
int print_address(va_list args, params_t *params);
char *convert(long int num, int base, int flags, params_t *params);

int print_binary(va_list args, params_t *params);
int print_octal(va_list args, params_t *params);
int print_hex(va_list args, params_t *params);
int print_HEX(va_list args, params_t *params);


int _puts(chat *str);
int _putchar(int c);


int _isdigit(int c);
int _strlen(char *s);
int print_number(char *str, params_t *params);
int print_number_rights(char *str, params_t *params);
int print_number_lefts(char *str, params_t *params);
#endif /* MAIN_H */
